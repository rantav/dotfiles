# Many goodies from here and all around http://stackoverflow.com/questions/267761/what-does-your-gitconfig-contain

[user]
  name = ... # Your name, e.g. Ran Tavory
  email = ... # Your email e.g. rantav@gmail.com

[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[alias]
  st = status
  # diff stats
  ds = !git --no-pager diff --stat -M -w
  ci = commit
  br = branch
  co = checkout
  w = whatchanged
  # Visual Diff tool (Diff all changed files at the same time)
  vdiff = !git-diff-all.sh
  # show list of contributors in descending order by number of commits
  rank = shortlog -sn --no-merges
  # given any git object, try to show it briefly
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
  # Search for a given string in all patches and print commit messages
  # example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  # example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  # example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""
  # Change log in a compact format
  changes = log --oneline --reverse
  # shows a nice graph of branches/merges
  graph = log --graph --pretty=format:'%C(red)%h%C(reset) %C(yellow)%d%C(reset)%s %C(green)%an %C(bold black)%cr%C(reset)' --abbrev-commit --date=relative
  # list of tags
  tags = tag -n1 -l
  # After I accidentally commit too much and want to roll back the commit but keep the changes:
  uncommit = reset --soft HEAD^
  # Amend last commit's message
  amend = commit --amend
  # The usual push command
  ps = push origin master
  # The usual pull command with a --rebase b/c that's how I like it
  pl = pull --rebase origin master
  ec = config --global -e
  up = !git pull --rebase --prune $@ && git submodule update --init --recursive
  cob = checkout -b
  cm = !git add -A && git commit -m
  save = !git add -A && git commit -m 'SAVEPOINT'
  wip = !git add -u && git commit -m "WIP"
  undo = reset HEAD~1 --mixed
  amend = commit -a --amend
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  bclean = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
  bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

[diff]
  tool = diffmerge

[difftool "diffmerge"]
  cmd = "diffmerge" "$LOCAL" "$REMOTE"

[merge]
  tool = diffmerge

[mergetool "diffmerge"]
  cmd = "diffmerge" -3 -merge -wait "$LOCAL" "$BASE" "$REMOTE" "$MERGED"
  trustExitCode = false

[core]
  pager = less -FRSX
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[apply]
  whitespace = fix

[heroku]
	account = rantav
[credential]
	helper = osxkeychain
